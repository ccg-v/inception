events {} # [1]

http { # [1]
    server {
        # Only allow HTTPS [2]
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name ccarrace.42.fr; # [3]

        # TLS settings (only v1.2 and v1.3 allowed)
        ssl_certificate /etc/ssl/certs/ccarrace.crt;
        ssl_certificate_key /etc/ssl/private/ccarrace.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        # Set root and index directives for WordPress [4]
        root /var/www/html;
        index index.php;

		# Handle static files or fallback to WordPress permalinks [5]
		location / {
			try_files $uri $uri/ /index.php$is_args$args;
		}

        # Handle PHP files via FastCGI (WordPress) [6]
        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass wordpress:9000;
			fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        # Deny access to hidden files like .htaccess or .env [7]
        location ~ /\. {
            deny all;
        }
    }
}

# [1] Syntactically, the `events` block is mandatory in the main context of 
#		`nginx.conf`, even if it's empty. But it doesn't mean the server 
#		won't handle incoming connections (that's the role of the `events`
#		block), it's just that we are not customizing any of the event 
#		settings. We are simply telling Nginx to use the default event
#		handling settings.
#
#		Likewise, for syntactical reasons all the `server` blocks must live
#		inside `http` block, which is where Nginx configures settings for
#		handling HTTP/S traffic.
#
# ------------------------------------------------------------------------------
# [2] We are telling Nginx to listen for HTTPS connections on port 433 over IPv4:
#			`listen 443 ssl`
#		and IPv6:
#			`listen [::]:443 ssl`
#		The `ssl` flag explicitly tells Nginx that this block handles TLS(HTTPS)
#		traffic.
#
#		It is a clean and modern way to declare dual-stack support in Nginx.
#		We are ensuring maximum coempatibility with any client.
#
# -----------------------------------------------------------------------------
# [3] The subject specifically says: "You must configure your domain name to
#		point to your local IP address. This domain name must be login.42.fr"
#		This implies that:
#		- The browser will make an HTTPS request to `https://login.42.fr`
#		- Nginx needs to match that hostname with the correct `server_name` to
#			serve our site and SSL certificate correctly.
#		- If the name doesn't match, Nginx won't know what server block to use,
#			or it may default to the wrong one, potentially breaking HTTPS and
#			routing.
# 
#		But a single `server` block can have multiple names:
#			server_name login.42.fr www.login.42.fr www.mylogin.42.fr
#		You can list any number of names, separated by spaces, and Ngin will
#		match any of them to that `server` block. This is commonly uused to
#		support aliases, like:
#		- With or without `www`
#		- Different domains pointing to the same site
#		- Local testing (`localhost`, `127.0.0.1`, etc.)
#
#		You only need multiple `server` blocks if:
#		- Each name should serve different contents
#		- You want different TLS certificates or settings
#		- You are revers-proxying to different backend services
#
# ------------------------------------------------------------------------------
# [4] `root /var/www/html`
#
#		Sets the base directory to look for files when handling requestes (we
#		previously ensured the path will exist creating it in Nginx Dockerfile)
#		
#		`index index.php`
#		This tells Nginx: "When a request comes from a directory (like /), serve
#		the file 'index.php' from the root directory". E.g. if someone visits 
#			https://login.42.fr/whatever/more
#		NGINX will try to map that to:
#			/var/www/html/whatever/more/
#		Then look for a file named `index.php` inside that directory. So the
#		full path it tries is:
#			/var/www/html/whatever/more/index.php
#		If it finds it, it serves it using PHP-FPM (FastCGI). If not, it gives
#		a `404 error` unless another rule matches first.
#
#		WHY `index.php` IS IMPORTANT IN WORDPRESS?
#
#		WordPress is designed around a single front controller: the `index.php`
#		file.:
#		- It loads the entire WordPress framework
#		- It delegates routing to WordPress's internal logic
#		- It makes it possible for every URL (like /blog/post/123, /about, etc.)
#			to be handled by one file
#		So:
#		- It is theentry point for the WordPress frontend,  the starting point
#			of all WordPress requests
#		- It works like a dispatcher: WordPress hooks into this file to handle
#			all dynamic URLs
#		- Without it, WordPress can't function. It's the bridge between NGINX
#			and WordPress’s internal logic
#
# ------------------------------------------------------------------------------
# [5] `location /`
#
#		A permalink (short for permanent link) is a clean, human-readable URL
#		that points to a specific post (a blog entry, news article...) or page 
#		in WordPress. For instance:
#			- Ugly default: 	`https://ccarrace.42.fr/?p=123`
#			- Pretty permalink:	`https://ccarrace.42.fr/my-post-title`
#		When a visitor accesses:
#			`https://ccarrace.42.fr/my-post-title`
#		1. Nginx will use the `location \' block and :
#			- Look for a file `/var/www/html/my-post-title` → Not found
#			- Look for a directory `/var/www/html/my-post-title/` → Not found
#			- Fall back to:
#					/index.php?is_args&args
#					→ actually becomes something like:
#					/index.php?my-post-title
#		2. WordPress (via `index.php`):
#			- Receives the query
#			- Internally parses `$_SERVER['REQUEST_URI']`
#			- Use its database to find a post with the slug `my-post-title`
#			- If WordPress is installed correctly and has a post called
#				`my-post-title`, it will serve that post's HTML content.
#			- If WordPress can't find that post, it returns a '404 Not Found'
#				page
#
#		By adding the try_files logic, the browser will keep displaying the
#		pretty URL, and WordPress will handle it internally even though that
#		file doesn't exist.
#		That's why it's essential for "pretty permalinks": without try_files,
#		those URLs break and give you 404s.
#
# ------------------------------------------------------------------------------
# [6] `location ~ \.php$`
#
#		This is a regex location block for handle PHP files. It matches any URI [8]
#		that ENDS IN `.php`.
#		This block intercepts .php requests, prepares the needed environment
#		variables (especially the script filename), and forwards the request
#		to PHP-FPM inside the WordPress container.
#
#		Line-by-line break down:
#
#		`include fastcgi_params;`:
#
#		- Loads a file of default FastCGI parameters that NGINX passes to PHP-FPM.
#		- These are things like `REQUEST_METHOD`, `CONTENT_TYPE`, etc.
#		- The file usually lives at `/etc/nginx/fastcgi_params`.
#
#		`fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;`:
#
#		- Sets a critical variable for PHP-FPM: the absolute path of the PHP
#			file to run.
#		- `$document_root` is the value set by the `root` directive (like 
#			`/var/www/html`).
#		- `$fastcgi_script_name` is the URI [8] part (e.g., `/index.php`).
#		-->  So together: `/var/www/html/index.php`
#		- If this line is missing or wrong, PHP-FPM won’t know which file to
#			execute and we'll get a 500 error or a blank page.
#
#		`fastcgi_pass wordpress:9000;`:
#
#		- Tells NGINX to send the request to the WordPress container, on port 9000.
#		- wordpress is the hostname (Docker service name).
#		- Port 9000 is where PHP-FPM is listening inside that container.
#
# ------------------------------------------------------------------------------
# [7] `location ~ /\.`
#
#		- '~' symbol is telling Nginx that the block uses a regex pattern, not a
#			literal string. 
#		- Regex (Regular Expression) is a powerful mini-language
#			used to describe patterns in text. Examples:
#				+ `abc` matches the string `abc`
#				+ `a.*z` matches any string starting with `a` and ending with `z`
#				+ `/\.` matches a slash `/` followed by a literal dot `.` (used
#					in paths like /.env)
#		- So with `location ~ /\.` we are saying to Ngixnx: "Use regex to match 
#			any URI [8] that starts with a / followed by a dot."
#			This will block `/.\env`, `/.\git`, `/.\hidden`, etc... regardless  
#			of what domain was used. For instance, in this URL:
#				https://ccarrace.42.fr/whatever/folder/.hidden
#			will match `/whatever/folder/.hidden` because there’s a `/` followed 
#			by a `.` somewhere in the path.
#
#-------------------------------------------------------------------------------
# [8] URI: 
#
#		- Stands for Uniform Resource Identifier.
#		- In simple terms, a URI is the part of a URL after the domain, used to 
#			locate a resource on a server.
#		- In the following URL (Uniform Resource Locator):
#			`https://ccarrace.42.fr/static/images/photo.jpg`
#				+ Domain: `ccarrace.42.fr`
#				+ URI: `static/images/photo.jpg`
#			The URI is what NGINX sees in incoming requests and what it uses to 
#			match against location blocks in the `nginx.conf`.
