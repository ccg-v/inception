events {} # [1]

http { # [1]
    server {
        # Only allow HTTPS [2]
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name ccarrace.42.fr; # [3]

        # TLS settings (only v1.2 and v1.3 allowed)
        ssl_certificate /etc/ssl/certs/ccarrace.crt;
        ssl_certificate_key /etc/ssl/private/ccarrace.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        # Root and index for WordPress [4]
        root /var/www/html;
        index index.php;

        # Handle PHP files via FastCGI (WordPress)
        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_pass wordpress:9000;
        }

        # Deny access to hidden files like .htaccess
        location ~ /\. {
            deny all;
        }
    }
}

# [1] Syntactically, the `events` block is mandatory in the main context of 
#		`nginx.conf`, even if it's empty. But it doesn't mean the server 
#		won't handle incoming connections (that's the role of the `events`
#		block), it's just that we are not customizing any of the event 
#		settings. We are simply telling Nginx to use the default event
#		handling settings.
#
#		Likewise, for syntactical reasons all the `server` blocks must live
#		inside `http` block, which is where Nginx configures settings for
#		handling HTTP/S traffic.
# ------------------------------------------------------------------------------
# [2] We are telling Nginx to listen for HTTPS connections on port 433 over IPv4:
#			`listen 443 ssl`
#		and IPv6:
#			`listen [::]:443 ssl`
#		The `ssl` flag explicitly tells Nginx that this block handles TLS(HTTPS)
#		traffic.
#
#		It is a clean and modern way to declare dual-stack support in Nginx.
#		We are ensuring maximum compatibility with any client.
# -----------------------------------------------------------------------------
# [3] The subject specifically says: "You must configure your domain name to
#		point to your local IP address. This domain name must be login.42.fr"
#		This implies that:
#		- The browser will make an HTTPS request to `https://login.42.fr`
#		- Nginx needs to match that hostname with the correct `server_name` to
#			serve our site and SSL certificate correctly.
#		- If the name doesn't match, Nginx won't know what server block to use,
#			or it may default to the wrong one, potentially breaking HTTPS and
#			routing.
# 
#		But a single `server` block can have multiple names:
#			server_name login.42.fr www.login.42.fr www.mylogin.42.fr
#		You can list any number of names, separated by spaces, and Ngin will
#		match any of them to that `server` block. This is commonly uused to
#		support aliases, like:
#		- With or without `www`
#		- Different domains pointing to the same site
#		- Local testing (`localhost`, `127.0.0.1`, etc.)
#
#		You only need multiple `server` blocks if:
#		- Each name should serve different contents
#		- You want different TLS certificates or settings
#		- You are revers-proxying to different backend services
# ------------------------------------------------------------------------------
# [4] `root /var/www/html`
#		Sets the base directory to look for files when handling requestes (we
#		previously ensured the path will exist creating it in Nginx Dockerfile)
#		
#		`index index.php`
#		This tells Nginx: "When a request comes from a directory (like /), serve
#		the file 'index.php' from the root directory". So if someone visits 
#			https://login.42.fr/whatever/more
#		NGINX will try to map that to:
#			/var/www/html/whatever/more/
#		Then look for a file named `index.php` inside that directory. So the full
#		path it tries is:
#			/var/www/html/whatever/more/index.php
#		If it finds it, it serves it using PHP-FPM (FastCGI). If not, it gives a 
#		`404 error` unless another rule matches first.
#
#		WHY `index.php` IS IMPORTANT IN WORDPRESS?
#
#		WordPress is designed around a single front controller: the `index.php` file.:
#		- It loads the entire WordPress framework
#		- It delegates routing to WordPress's internal logic
#		- It makes it possible for every URL (like /blog/post/123, /about, etc.) to be 
#			handled by one file
#		So
#		- It is theentry point for the WordPress frontend,  the starting point of all 
#			WordPress requests
#		- It works like a dispatcher: WordPress hooks into this file to handle all 
#			dynamic URLs
#		- Without it, WordPress can't function. It's the bridge between NGINX and 
#			WordPressâ€™s internal logic